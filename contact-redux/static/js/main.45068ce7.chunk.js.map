{"version":3,"sources":["SignInForm.js","App.js","serviceWorker.js","index.js"],"names":["emailRegex","renderField","input","label","type","meta","touched","error","warning","placeholder","className","renderCheckboxField","SignInForm","props","handleSubmit","onSubmit","htmlFor","Field","name","component","value","rows","reduxForm","form","validate","val","errors","firstName","lastName","email","test","age","isNaN","Number","acceptTerms","App","values","alert","console","log","this","Component","Boolean","window","location","hostname","match","rootReducer","combineReducers","formReducer","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45068ce7.chunk.js","sourcesContent":["import React from 'react';\r\nimport {reduxForm,Field} from 'redux-form';\r\n\r\nconst emailRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n\r\nconst validate = val => {\r\n    const errors = {};\r\n    if (!val.firstName) {\r\n      errors.firstName = 'Required';\r\n    }\r\n    if (!val.lastName) {\r\n      errors.lastName = 'Required';\r\n    }\r\n    if (!val.email) {\r\n      errors.email = 'Required';\r\n    } else if (!emailRegex.test(val.email)) {\r\n      errors.email = 'Invalid email address';\r\n    }\r\n    if (!val.age) {\r\n      errors.age = 'Required'\r\n    } else if (isNaN(Number(val.age))) {\r\n      errors.age = 'Must be a number'\r\n    } else if (Number(val.age) < 18) {\r\n      errors.age = 'Sorry, you must be at least 18 years old'\r\n    }\r\n    if (!val.acceptTerms) {\r\n      errors.acceptTerms = 'Please accept terms and conditions';\r\n    }\r\n    return errors;\r\n  };\r\n  \r\n  const renderField = ({ input, label, type, meta: { touched, error, warning } }) => (\r\n    <div>\r\n      <input {...input} placeholder={label} type={type} className=\"form-control\" />\r\n      {touched && ((error && <span className=\"text-danger\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n    </div>\r\n  )\r\n\r\n  const renderCheckboxField = ({ input, label, type, meta: { touched, error, warning } }) => (\r\n    <div>\r\n      <input {...input} type={type} />\r\n      <label className=\"control-label\">{label}</label>\r\n      <br />\r\n      {touched && ((error && <span className=\"text-danger\">{error}</span>) || (warning && <span>{warning}</span>))}\r\n    </div>\r\n  )\r\n\r\nlet SignInForm = props => {\r\n    const { handleSubmit } = props;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6 col-md-offset-3\">\r\n              <div className=\"well well-sm\">\r\n                <form onSubmit={handleSubmit} className=\"form-horizontal\">\r\n                <fieldset>\r\n                  \r\n                  <div className=\"form-group\">\r\n                    <label className=\"col-md-3 control-label\" htmlFor=\"firstName\">First Name</label>\r\n                    <div className=\"col-md-9\">\r\n                    <Field className=\"form-control\" name=\"firstName\" \r\n                     component={renderField} type=\"text\" placeholder=\"First Name\"/>\r\n                    </div>\r\n                  </div>\r\n          \r\n                  <div className=\"form-group\">\r\n                    <label className=\"col-md-3 control-label\" htmlFor=\"lastName\">Last Name</label>\r\n                    <div className=\"col-md-9\">\r\n                    <Field className=\"form-control\" name=\"lastName\" \r\n                     component={renderField} type=\"text\" placeholder=\"Last Name\"/>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"form-group\">\r\n                    <label className=\"col-md-3 control-label\" htmlFor=\"email\">Email Address</label>\r\n                    <div className=\"col-md-9\">\r\n                    <Field className=\"form-control\" name=\"email\" \r\n                     component={renderField} type=\"email\" placeholder=\"Email Address\"/>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"form-group\">\r\n                    <label className=\"col-md-3 control-label\" htmlFor=\"age\">Age</label>\r\n                    <div className=\"col-md-9\">\r\n                    <Field className=\"form-control\" name=\"age\" \r\n                     component={renderField} type=\"number\" placeholder=\"Age\"/>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"form-group\">\r\n                    <label className=\"col-md-3 control-label\" htmlFor=\"proficiency\">Proficiency</label>\r\n                    <div className=\"col-md-9\">\r\n                    <Field className=\"form-control\" name=\"proficiency\" component=\"select\">\r\n                      <option />\r\n                      <option value=\"beginner\">Beginner Dev</option>\r\n                      <option value=\"intermediate\">Intermediate Dev</option>\r\n                      <option value=\"expert\">Expert Dev</option>\r\n                     </Field>\r\n                    </div>\r\n                  </div>\r\n          \r\n                  <div className=\"form-group\">\r\n                    <label className=\"col-md-3 control-label\" htmlFor=\"gender\">Gender</label>\r\n                    <div className=\"col-md-9\">\r\n                      <Field name=\"gender\" component=\"input\" type=\"radio\" value=\"male\" /> Male\r\n                      {' '}\r\n                      <Field name=\"gender\" component=\"input\" type=\"radio\" value=\"female\" /> Female\r\n                    </div>\r\n                  </div>\r\n                \r\n                  <div className=\"form-group\">\r\n                    <label className=\"col-md-3 control-label\" htmlFor=\"message\">Your message</label>\r\n                    <div className=\"col-md-9\">\r\n                      <Field className=\"form-control\" name=\"message\" component=\"textarea\" placeholder=\"Please enter your message here...\" rows=\"5\" />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"form-group\">\r\n                    <div className=\"col-md-12\">\r\n                      <Field name=\"acceptTerms\" component={renderCheckboxField} type=\"checkbox\" label=\"I accept terms and conditions\" />\r\n                    </div>\r\n                  </div>\r\n          \r\n                  <div className=\"form-group\">\r\n                    <div className=\"col-md-12 text-right\">\r\n                      <button type=\"submit\" className=\"btn btn-primary btn-lg\">Submit</button>\r\n                    </div>\r\n                  </div>\r\n                </fieldset>\r\n                </form>\r\n              </div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nSignInForm = reduxForm({\r\n    form: 'signIn',\r\n    validate\r\n})(SignInForm);\r\n\r\nexport default SignInForm;","import React, {Component} from 'react';\nimport './App.css';\nimport SignInForm from './SignInForm';\n\nclass App extends Component {\n  handleSubmit = (values) => {\n    alert(\"Submitted\");\n    console.log(values);\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n          <div className=\"container\">\n            <span className=\"App-intro\">\n              <h2>Contact Form</h2>\n            </span>\n            <SignInForm onSubmit={this.handleSubmit}/>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer as formReducer } from 'redux-form';\n\nconst rootReducer = combineReducers({\n    form: formReducer,\n  });\n  \nconst store = createStore(rootReducer); \n\nReactDOM.render(\n<Provider store={store}>\n    <App />\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}