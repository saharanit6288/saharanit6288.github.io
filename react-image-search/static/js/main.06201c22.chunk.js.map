{"version":3,"sources":["components/SearchBar.js","components/ImageCard.js","components/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","event","setState","val","target","value","onFormSubmit","preventDefault","userSearchTerm","state","react_default","a","createElement","className","onSubmit","type","onChange","loading","React","Component","ImageCard","src","image","urls","regular","alt","alt_description","ImageList","foundImages","map","img","components_ImageCard","key","id","App","onSearchSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","term","response","wrap","_context","prev","next","onLoad","axios","get","params","query","headers","Authorization","sent","images","data","results","stop","_x","apply","arguments","src_components_SearchBar","length","src_components_ImageList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06201c22.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBar.css'; \r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            val: '',\r\n        };\r\n    }\r\n\r\n    onInputChange = (event) => {\r\n        this.setState({val: event.target.value});\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.userSearchTerm(this.state.val);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"flexContainer\" onSubmit={this.onFormSubmit}>\r\n                    <label><h2>Image Search: </h2></label>\r\n                    <input className=\"inputStyle\" \r\n                        type=\"text\" \r\n                        value={this.state.val}\r\n                        onChange={this.onInputChange} />\r\n                    <label className={this.props.loading ? '' : 'hidden'}>Loading...</label>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nclass ImageCard extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"image-list\">\r\n                <img src={this.props.image.urls.regular}\r\n                    alt={this.props.image.alt_description} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageCard;","import React from 'react';\r\nimport './ImageList.css';\r\nimport ImageCard from './ImageCard';\r\n\r\nclass ImageList extends React.Component {\r\n   \r\n    render() {\r\n        return (\r\n            <div className=\"image-list\">\r\n                {this.props.foundImages.map(img => {\r\n                    return <ImageCard key={img.id} image={img} />\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageList;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport ImageList from './components/ImageList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      images: [],\n      onLoad: false\n    }\n  }\n\n  onSearchSubmit = async (term) => {\n    this.setState({onLoad: true});\n    const response = await axios.get('https://api.unsplash.com/search/photos',\n      {\n        params: {\n          query: term\n        },\n        headers: {\n          Authorization: 'Client-ID ' + process.env.REACT_APP_Unsplash_Access_Key\n        }\n      });\n      \n      this.setState({\n        images: response.data.results,\n        onLoad: false\n      });\n  }\n\n  render() {\n    return (\n        <div>\n          <SearchBar userSearchTerm={this.onSearchSubmit} loading={this.state.onLoad}/>\n          <span className=\"center\"><b>Found: {this.state.images.length} image(s)</b></span>\n          <ImageList foundImages={this.state.images}/>\n        </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}