{"version":3,"sources":["../node_modules/keyv/src sync","../node_modules/got/source sync","Components/ChatMessage.js","Components/Signup.js","Components/MessageList.js","Components/SendMessage.js","Components/ChatApp.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ChatMessage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeView","bind","assertThisInitialized","react_default","a","createElement","className","onClick","React","Component","Signup","state","username","handleChange","handleSubmit","setState","target","value","preventDefault","onSubmit","htmlFor","type","name","onChange","MessageList","messages","map","message","index","key","senderId","text","SendMessage","ChatApp","currentUser","currentRoom","users","addMessage","_this2","ChatManager","instanceLocator","process","userId","currentId","tokenProvider","TokenProvider","url","connect","then","subscribeToRoom","roomId","messageLimit","hooks","onMessage","concat","toConsumableArray","userIds","catch","error","console","log","sendMessage","Components_MessageList","Components_SendMessage","chatkit","Chatkit","App","currentUsername","currentView","createUser","err","status","view","Components_ChatMessage","Components_Signup","Components_ChatApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea79520b.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 260;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 268;","import React from 'react';\r\n\r\nclass  ChatMessage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.changeView = this.changeView.bind(this);\r\n    }\r\n    changeView() {\r\n        this.props.changeView('signup')\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button className=\"chat-button\" onClick={this.changeView}>Send a message</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ChatMessage;","import React from 'react';\r\n\r\nclass  Signup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.setState({username: e.target.value});\r\n    }\r\n    handleSubmit(e) {\r\n        e.preventDefault()\r\n        this.props.onSubmit(this.state.username);\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"form-container\">\r\n                <h1>Let's Talk</h1>\r\n                <form onSubmit={this.handleSubmit} className=\"form\">\r\n                    <label htmlFor=\"email\">What is your email?</label>\r\n                    <input \r\n                        type=\"email\" \r\n                        name=\"username\" \r\n                        onChange={this.handleChange} \r\n                        className=\"input\" />\r\n                    <button className=\"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Signup;","import React from 'react';\r\n\r\nclass MessageList extends React.Component {\r\n    render() {\r\n        return(\r\n            <ul className=\"message-list\">\r\n                {this.props.messages.map((message, index) => (\r\n                    <li key={index}>\r\n                        <h4 className=\"message-sender\">{message.senderId}</h4>\r\n                        <p className=\"message-text\">{message.text}</p>\r\n                    </li>\r\n                ))}\r\n                <li></li>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nexport default MessageList;","import React from 'react';\r\n\r\nclass SendMessage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            message: \"\"\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.setState({\r\n            message: e.target.value\r\n        })\r\n    }\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state.message);\r\n        this.setState({\r\n            message: ''\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"input-field\">\r\n                <input \r\n                    className=\"message-input\" \r\n                    type=\"text\" \r\n                    onChange={this.handleChange} \r\n                    value={this.state.message}/>\r\n                <input \r\n                    className=\"message-submit\" \r\n                    type=\"submit\" \r\n                    value=\"send\" />   \r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default SendMessage;","import React from 'react';\r\nimport MessageList from './MessageList';\r\nimport SendMessage from './SendMessage';\r\nimport { ChatManager, TokenProvider } from '@pusher/chatkit-client';\r\n\r\nclass ChatApp extends React.Component {\r\n    constructor(props) {\r\n        super(props); \r\n        this.state = {\r\n            currentUser: null,\r\n            currentRoom: {users:[]},\r\n            messages: [],\r\n            users: []\r\n        }\r\n        this.addMessage = this.addMessage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const chatManager = new ChatManager({\r\n            instanceLocator: process.env.REACT_APP_INSTANCE_LOCATOR,\r\n            userId: this.props.currentId,\r\n            tokenProvider: new TokenProvider({\r\n                url: process.env.REACT_APP_TOKEN_PROVIDER\r\n            })\r\n        });\r\n\r\n        chatManager\r\n        .connect()\r\n        .then(currentUser => {\r\n            this.setState({ currentUser: currentUser })\r\n            return currentUser.subscribeToRoom({\r\n                roomId: process.env.REACT_APP_ROOM_ID,\r\n                messageLimit: 100,\r\n                hooks: {\r\n                    onMessage: message => {\r\n                        this.setState({\r\n                            messages: [...this.state.messages, message],\r\n                        })\r\n                    },\r\n                }\r\n            })\r\n        })\r\n        .then(currentRoom => {\r\n            this.setState({\r\n                currentRoom,\r\n                users: currentRoom.userIds\r\n            })\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n\r\n    addMessage(text) {\r\n        this.state.currentUser.sendMessage({\r\n            text,\r\n            roomId: this.state.currentRoom.id\r\n        })\r\n        .catch(error => console.error('error', error));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2 className=\"header\">Let's Talk</h2>\r\n                <MessageList messages={this.state.messages} />\r\n                <SendMessage className=\"input-field\" onSubmit={this.addMessage} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatApp;","import React from 'react';\nimport ChatMessage from './Components/ChatMessage';\nimport Signup from './Components/Signup'; \nimport ChatApp from './Components/ChatApp';\nimport { default as Chatkit } from '@pusher/chatkit-server';\n\nconst chatkit = new Chatkit({\n  instanceLocator: process.env.REACT_APP_INSTANCE_LOCATOR,\n  key: process.env.REACT_APP_SECRET_KEY\n})\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        currentUsername: '',\n        currentId: '',\n        currentView: 'ChatMessage'\n      }\n      this.changeView = this.changeView.bind(this);\n      this.createUser = this.createUser.bind(this);\n  }\n\n  createUser(username) {\n    chatkit.createUser({\n        id: username,\n        name: username,\n    })\n    .then((currentUser) => {\n        this.setState({\n            currentUsername: username,\n            currentId: username,\n            currentView: 'chatApp'\n        })\n    })\n    .catch((err) => {\n             if(err.status === 400) {\n            this.setState({\n                currentUsername: username,\n                currentId: username,\n                currentView: 'chatApp'\n            })\n        } else {\n            console.log(err.status);\n        }\n    });\n  }\n\n  changeView(view) {\n      this.setState({\n          currentView: view\n      })\n  }\n\n  render() {\n        let view ='';\n        if (this.state.currentView === \"ChatMessage\") {\n            view = <ChatMessage  changeView={this.changeView}/>\n        }\n        else if (this.state.currentView === \"signup\") {\n          view = <Signup onSubmit={this.createUser} />\n        }\n        else if (this.state.currentView === \"chatApp\") {\n          view = <ChatApp currentId={this.state.currentId} />\n        }\n        return (\n            <div className=\"App\">\n                {view}\n            </div>\n        );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}